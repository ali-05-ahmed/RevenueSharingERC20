[{"C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\index.js":"1","C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\App.js":"3","C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\store\\store.js":"4","C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\store\\connectSlice.js":"5"},{"size":975,"mtime":1633018255748,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1630924202523,"results":"8","hashOfConfig":"7"},{"size":3658,"mtime":1633019137364,"results":"9","hashOfConfig":"7"},{"size":387,"mtime":1630924202529,"results":"10","hashOfConfig":"7"},{"size":9870,"mtime":1632736901162,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"3hs5hi",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"15"},"C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\index.js",["26","27","28"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './store/store';\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { client } from \"./App\"\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n\r\n\r\n    <ApolloProvider client={client} store={store}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </ApolloProvider>\r\n\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["29","30"],"C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\App.js",["31","32","33","34","35"],"C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\store\\store.js",["36"],"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { createStore } from \"redux\";\r\nimport { connectReducer } from './connectSlice'\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        connectReducer: connectReducer\r\n    },\r\n    middleware: getDefaultMiddleware({\r\n        seriallizableCheck: false,\r\n        immutableCheck: false\r\n    })\r\n})","C:\\Users\\Acer\\Documents\\PIAIC\\pana\\Erc20\\truffle\\client\\src\\store\\connectSlice.js",["37","38","39","40","41","42","43","44","45","46","47","48"],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport {\r\n    ChainId,\r\n    Token,\r\n    WETH,\r\n    Fetcher, Percent,\r\n    Trade,\r\n    Route,\r\n    TokenAmount,\r\n    TradeType,\r\n} from \"@uniswap/sdk\";\r\nimport Web3 from 'web3'\r\nimport UniswapV2Router02 from '../contracts/uniswapAbi.json'\r\nimport WETHcon from '../contracts/WETHabi.json'\r\n\r\n\r\nexport const web3init = createAsyncThunk(\r\n    \"web3init\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            if (Web3.givenProvider) {\r\n                const web3 = new Web3(Web3.givenProvider)\r\n                await Web3.givenProvider.enable()\r\n                const address = await web3.eth.getAccounts()\r\n\r\n                const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n                const DAIaddress = \"0xad6d458402f60fd3bd25163575031acdce07538d\"\r\n                const uniswapV2constract = await new web3.eth.Contract(UniswapV2Router02.abi, uniswapv2address)\r\n                //    const WETH = await uniswapV2constract.methods.WETH().call()\r\n\r\n                console.log(address)\r\n                return {\r\n                    web3, address: address[0], DAIaddress, uniswapV2constract\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\n\r\nexport const web3Reload = createAsyncThunk(\r\n    \"web3Reload\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            if (Web3.givenProvider) {\r\n                const web3 = new Web3(Web3.givenProvider)\r\n\r\n                const address = await web3.eth.getAccounts()\r\n\r\n                const contractName = await UniswapV2Router02.contractName;\r\n\r\n                const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n                const DAIaddress = \"0xad6d458402f60fd3bd25163575031acdce07538d\"\r\n                const uniswapV2constract = await new web3.eth.Contract(UniswapV2Router02.abi, uniswapv2address)\r\n                // const WETH = await uniswapV2constract.methods.WETH().call()\r\n\r\n                // const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH)\r\n\r\n                await thunkAPI.dispatch(uniswapSdkP({ web3: web3 }))\r\n\r\n                console.log(address)\r\n                return {\r\n                    web3, address: address[0], DAIaddress, uniswapV2constract, contractName\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\nexport const WETHapprove = createAsyncThunk(\r\n    \"WETHapprove\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            const { web3, address, uniswapV2constract, WETH } = thunkAPI.getState().connectReducer\r\n\r\n            const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH)\r\n\r\n            const approve = await WETHcontract.methods.approve(uniswapV2constract)\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\nconst DAI = createAsyncThunk(\r\n    \"DAI\",\r\n    async (data, thunkAPI) => {\r\n        const { web3, address, uniswapV2constract } = thunkAPI.getState().connectReducer\r\n        const DAItoken = new Token(\r\n            ChainId.ROPSTEN,\r\n            await web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"),\r\n            18\r\n        );\r\n        return DAItoken\r\n    }\r\n)\r\n\r\nexport const getDAI_ETHprice = createAsyncThunk(\r\n    'getDAI_ETHprice',\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            console.log(DAI().address);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n)\r\n\r\nexport const uniswapSdkP = createAsyncThunk(\r\n    'uniswapSdkP',\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            const { web3, address, uniswapV2constract } = thunkAPI.getState().connectReducer\r\n            if (web3 == null)\r\n                web3 = data.web3\r\n\r\n            const chainId = ChainId.ROPSTEN\r\n            const DAI = new Token(\r\n                ChainId.ROPSTEN,\r\n                web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"),\r\n                18\r\n            );\r\n            console.log(DAI.address)\r\n            const weth = WETH[chainId]\r\n            const pair = await Fetcher.fetchPairData(DAI, weth);\r\n            const route = new Route([pair], weth)\r\n            console.log(route.midPrice.toSignificant(6))\r\n            console.log(route.midPrice.invert().toSignificant(6))\r\n            return {\r\n                DAI\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\n\r\nexport const swapETHForTokens = createAsyncThunk(\r\n    'swap',\r\n    async (data, thunkAPI) => {\r\n        try {\r\n\r\n            const { web3, address, uniswapV2constract } = thunkAPI.getState().connectReducer\r\n            console.log(ChainId.ROPSTEN)\r\n            const DAI = new Token(\r\n                ChainId.ROPSTEN,\r\n                await web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"),\r\n                18\r\n            );\r\n\r\n            // note that you may want/need to handle this async code differently,s\r\n            // for example if top-level await is not an option\r\n            const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId]);\r\n\r\n            const route = new Route([pair], WETH[DAI.chainId]);\r\n\r\n            const amountIn = \"100000000000000000\"; // 1 WETH\r\n\r\n            const trade = new Trade(\r\n                route,\r\n                new TokenAmount(WETH[DAI.chainId], amountIn),\r\n                TradeType.EXACT_INPUT\r\n            );\r\n            const slippageTolerance = new Percent(\"50\", \"10000\"); // 50 bips, or 0.50%\r\n            const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n            const amountOutMin = String(trade.minimumAmountOut(slippageTolerance).raw); // needs to be converted to e.g. hex\r\n            const path = [WETH[DAI.chainId].address, DAI.address];\r\n            const to = \"\"; // should be a checksummed recipient address\r\n            const deadline = Math.floor(Date.now() / 1000) + 60 * 30; // 20 minutes from the current Unix time\r\n            const value = String(trade.inputAmount.raw); // // needs to be converted to e.g. hex\r\n            //     const approve = await WETHcontract.methods.approve(uniswapv2address, getAmountsOut[1]).send({ from: address })\r\n            const swapResult = await uniswapV2constract.methods.swapExactETHForTokens(amountOutMin, path, address, deadline).send({ from: address, value: value, gasPrice: 20e9 })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n)\r\n\r\nexport const swapDaiEth = createAsyncThunk(\r\n    \"swapDaiEth\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            const { web3, address, uniswapV2constract, WETH, DAIaddress } = thunkAPI.getState().connectReducer\r\n            const DAIvalue = await web3.utils.toWei('100', 'ether');\r\n            const getAmountsOut = await uniswapV2constract.methods.getAmountsOut(DAIvalue, [DAIaddress, WETH]).call()\r\n            //  const getAmountsIn = await uniswapV2constract.methods.getAmountsIn(DAIvalue, [WETH, DAIaddress]).call()\r\n            const ETHvalue = await web3.utils.fromWei(getAmountsOut[1], 'ether');\r\n            const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH)\r\n            const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n            const approve = await WETHcontract.methods.approve(uniswapv2address, getAmountsOut[1]).send({ from: address })\r\n            const swapResult = await uniswapV2constract.methods.swapExactETHForTokens(getAmountsOut[1], [WETH, DAIaddress], address, 15).send({ from: address, value: getAmountsOut[1] })\r\n            //   const ETHvalue = await web3.utils.fromWei(getAmountsIn, 'ether');\r\n            console.log(swapResult)\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n)\r\n\r\n\r\nconst connectSlice = createSlice(\r\n    {\r\n        name: 'connectSlice',\r\n        initialState: {\r\n            web3: null,\r\n            address: null,\r\n            name: 'ali',\r\n            msg: null,\r\n            contractName: null,\r\n            uniswapV2constract: null,\r\n            DAIaddress: null,\r\n            WETH: null,\r\n            DAI: null\r\n        },\r\n        reducers: {\r\n\r\n        }, extraReducers: {\r\n            [web3init.fulfilled]: (state, action) => {\r\n                try {\r\n                    state.web3 = action.payload.web3\r\n                    state.address = action.payload.address\r\n                    state.uniswapV2constract = action.payload.uniswapV2constract\r\n                    state.DAIaddress = action.payload.DAIaddress\r\n                    //    state.WETH = action.payload.WETH\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    //       state.msg = error\r\n                }\r\n\r\n            },\r\n            [web3Reload.fulfilled]: (state, action) => {\r\n                try {\r\n                    state.web3 = action.payload.web3\r\n                    state.address = action.payload.address\r\n                    state.uniswapV2constract = action.payload.uniswapV2constract\r\n                    state.DAIaddress = action.payload.DAIaddress\r\n                    state.DAI = action.payload.DAI\r\n                    //        state.WETH = action.payload.WETH\r\n                    state.contractName = action.payload.contractName\r\n                } catch (error) {\r\n\r\n                }\r\n            }\r\n            ,\r\n            [web3Reload.rejected]: (state, action) => {\r\n                state.web3 = null\r\n                state.address = null\r\n                state.msg = \"user denied\"\r\n            }\r\n            ,\r\n            [web3init.rejected]: (state, action) => {\r\n                console.log(\"asd\")\r\n                state.web3 = null\r\n                state.address = null\r\n                state.msg = \"user denied\"\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const connectReducer = connectSlice.reducer",{"ruleId":"49","severity":1,"message":"50","line":9,"column":10,"nodeType":"51","messageId":"52","endLine":9,"endColumn":23},{"ruleId":"49","severity":1,"message":"53","line":10,"column":10,"nodeType":"51","messageId":"52","endLine":10,"endColumn":18},{"ruleId":"49","severity":1,"message":"54","line":11,"column":10,"nodeType":"51","messageId":"52","endLine":11,"endColumn":22},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"49","severity":1,"message":"59","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":12},{"ruleId":"49","severity":1,"message":"60","line":5,"column":32,"nodeType":"51","messageId":"52","endLine":5,"endColumn":48},{"ruleId":"49","severity":1,"message":"61","line":5,"column":50,"nodeType":"51","messageId":"52","endLine":5,"endColumn":65},{"ruleId":"49","severity":1,"message":"62","line":40,"column":38,"nodeType":"51","messageId":"52","endLine":40,"endColumn":50},{"ruleId":"63","severity":1,"message":"64","line":75,"column":6,"nodeType":"65","endLine":75,"endColumn":8,"suggestions":"66"},{"ruleId":"49","severity":1,"message":"67","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":21},{"ruleId":"49","severity":1,"message":"68","line":77,"column":27,"nodeType":"51","messageId":"52","endLine":77,"endColumn":34},{"ruleId":"49","severity":1,"message":"69","line":81,"column":19,"nodeType":"51","messageId":"52","endLine":81,"endColumn":26},{"ruleId":"49","severity":1,"message":"68","line":91,"column":23,"nodeType":"51","messageId":"52","endLine":91,"endColumn":30},{"ruleId":"49","severity":1,"message":"70","line":91,"column":32,"nodeType":"51","messageId":"52","endLine":91,"endColumn":50},{"ruleId":"49","severity":1,"message":"68","line":117,"column":27,"nodeType":"51","messageId":"52","endLine":117,"endColumn":34},{"ruleId":"49","severity":1,"message":"70","line":117,"column":36,"nodeType":"51","messageId":"52","endLine":117,"endColumn":54},{"ruleId":"71","severity":1,"message":"72","line":119,"column":17,"nodeType":"51","messageId":"73","endLine":119,"endColumn":21},{"ruleId":"49","severity":1,"message":"74","line":171,"column":19,"nodeType":"51","messageId":"52","endLine":171,"endColumn":35},{"ruleId":"49","severity":1,"message":"75","line":174,"column":19,"nodeType":"51","messageId":"52","endLine":174,"endColumn":21},{"ruleId":"49","severity":1,"message":"76","line":178,"column":19,"nodeType":"51","messageId":"52","endLine":178,"endColumn":29},{"ruleId":"49","severity":1,"message":"77","line":194,"column":19,"nodeType":"51","messageId":"52","endLine":194,"endColumn":27},{"ruleId":"49","severity":1,"message":"69","line":197,"column":19,"nodeType":"51","messageId":"52","endLine":197,"endColumn":26},"no-unused-vars","'InMemoryCache' is defined but never used.","Identifier","unusedVar","'HttpLink' is defined but never used.","'ApolloClient' is defined but never used.","no-native-reassign",["78"],"no-negated-in-lhs",["79"],"'logo' is defined but never used.","'swapETHForTokens' is defined but never used.","'getDAI_ETHprice' is defined but never used.","'ethPriceData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'createStore' is defined but never used.","'address' is assigned a value but never used.","'approve' is assigned a value but never used.","'uniswapV2constract' is assigned a value but never used.","no-const-assign","'web3' is constant.","const","'uniswapv2address' is assigned a value but never used.","'to' is assigned a value but never used.","'swapResult' is assigned a value but never used.","'ETHvalue' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [dispatch]",{"range":"83","text":"84"},[2118,2120],"[dispatch]"]