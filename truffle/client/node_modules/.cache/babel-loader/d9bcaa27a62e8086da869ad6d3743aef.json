{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { ChainId, Token, WETH, Fetcher, Percent, Trade, Route, TokenAmount, TradeType } from \"@uniswap/sdk\";\nimport Web3 from 'web3';\nimport UniswapV2Router02 from '../contracts/uniswapAbi.json';\nimport WETHcon from '../contracts/WETHabi.json';\nexport const web3init = createAsyncThunk(\"web3init\", async (data, thunkAPI) => {\n  try {\n    if (Web3.givenProvider) {\n      const web3 = new Web3(Web3.givenProvider);\n      await Web3.givenProvider.enable();\n      const address = await web3.eth.getAccounts();\n      const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n      const DAIaddress = \"0xad6d458402f60fd3bd25163575031acdce07538d\";\n      const uniswapV2constract = await new web3.eth.Contract(UniswapV2Router02.abi, uniswapv2address); //    const WETH = await uniswapV2constract.methods.WETH().call()\n\n      console.log(address);\n      return {\n        web3,\n        address: address[0],\n        DAIaddress,\n        uniswapV2constract\n      };\n    }\n  } catch (error) {}\n});\nexport const web3Reload = createAsyncThunk(\"web3Reload\", async (data, thunkAPI) => {\n  try {\n    if (Web3.givenProvider) {\n      const web3 = new Web3(Web3.givenProvider);\n      const address = await web3.eth.getAccounts();\n      const contractName = await UniswapV2Router02.contractName;\n      const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n      const DAIaddress = \"0xad6d458402f60fd3bd25163575031acdce07538d\";\n      const uniswapV2constract = await new web3.eth.Contract(UniswapV2Router02.abi, uniswapv2address); // const WETH = await uniswapV2constract.methods.WETH().call()\n      // const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH)\n\n      await thunkAPI.dispatch(uniswapSdkP({\n        web3: web3\n      }));\n      console.log(address);\n      return {\n        web3,\n        address: address[0],\n        DAIaddress,\n        uniswapV2constract,\n        contractName\n      };\n    }\n  } catch (error) {}\n});\nexport const WETHapprove = createAsyncThunk(\"WETHapprove\", async (data, thunkAPI) => {\n  try {\n    const {\n      web3,\n      address,\n      uniswapV2constract,\n      WETH\n    } = thunkAPI.getState().connectReducer;\n    const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH);\n    const approve = await WETHcontract.methods.approve(uniswapV2constract);\n  } catch (error) {}\n});\nconst DAI = createAsyncThunk(\"DAI\", async (data, thunkAPI) => {\n  const {\n    web3,\n    address,\n    uniswapV2constract\n  } = thunkAPI.getState().connectReducer;\n  const DAItoken = new Token(ChainId.ROPSTEN, await web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"), 18);\n  return DAItoken;\n});\nexport const getDAI_ETHprice = createAsyncThunk('getDAI_ETHprice', async (data, thunkAPI) => {\n  try {\n    console.log(DAI().address);\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const uniswapSdkP = createAsyncThunk('uniswapSdkP', async (data, thunkAPI) => {\n  try {\n    const {\n      web3,\n      address,\n      uniswapV2constract\n    } = thunkAPI.getState().connectReducer;\n    if (data.web3 == null) data.web3 = web3;\n    const chainId = ChainId.ROPSTEN;\n    const DAI = new Token(ChainId.ROPSTEN, data.web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"), 18);\n    console.log(DAI.address);\n    const weth = WETH[chainId];\n    const pair = await Fetcher.fetchPairData(DAI, weth);\n    const route = new Route([pair], weth);\n    console.log(route.midPrice.toSignificant(6));\n    console.log(route.midPrice.invert().toSignificant(6));\n    return {\n      DAI\n    };\n  } catch (error) {}\n});\nexport const swapETHForTokens = createAsyncThunk('swap', async (data, thunkAPI) => {\n  try {\n    const {\n      web3,\n      address,\n      uniswapV2constract\n    } = thunkAPI.getState().connectReducer;\n    console.log(ChainId.ROPSTEN);\n    const DAI = new Token(ChainId.ROPSTEN, await web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"), 18); // note that you may want/need to handle this async code differently,s\n    // for example if top-level await is not an option\n\n    const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId]);\n    const route = new Route([pair], WETH[DAI.chainId]);\n    const amountIn = \"100000000000000000\"; // 1 WETH\n\n    const trade = new Trade(route, new TokenAmount(WETH[DAI.chainId], amountIn), TradeType.EXACT_INPUT);\n    const slippageTolerance = new Percent(\"50\", \"10000\"); // 50 bips, or 0.50%\n\n    const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n    const amountOutMin = String(trade.minimumAmountOut(slippageTolerance).raw); // needs to be converted to e.g. hex\n\n    const path = [WETH[DAI.chainId].address, DAI.address];\n    const to = \"\"; // should be a checksummed recipient address\n\n    const deadline = Math.floor(Date.now() / 1000) + 60 * 30; // 20 minutes from the current Unix time\n\n    const value = String(trade.inputAmount.raw); // // needs to be converted to e.g. hex\n    //     const approve = await WETHcontract.methods.approve(uniswapv2address, getAmountsOut[1]).send({ from: address })\n\n    const swapResult = await uniswapV2constract.methods.swapExactETHForTokens(amountOutMin, path, address, deadline).send({\n      from: address,\n      value: value,\n      gasPrice: 20e9\n    });\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const swapDaiEth = createAsyncThunk(\"swapDaiEth\", async (data, thunkAPI) => {\n  try {\n    const {\n      web3,\n      address,\n      uniswapV2constract,\n      WETH,\n      DAIaddress\n    } = thunkAPI.getState().connectReducer;\n    const DAIvalue = await web3.utils.toWei('100', 'ether');\n    const getAmountsOut = await uniswapV2constract.methods.getAmountsOut(DAIvalue, [DAIaddress, WETH]).call(); //  const getAmountsIn = await uniswapV2constract.methods.getAmountsIn(DAIvalue, [WETH, DAIaddress]).call()\n\n    const ETHvalue = await web3.utils.fromWei(getAmountsOut[1], 'ether');\n    const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH);\n    const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n    const approve = await WETHcontract.methods.approve(uniswapv2address, getAmountsOut[1]).send({\n      from: address\n    });\n    const swapResult = await uniswapV2constract.methods.swapExactETHForTokens(getAmountsOut[1], [WETH, DAIaddress], address, 15).send({\n      from: address,\n      value: getAmountsOut[1]\n    }); //   const ETHvalue = await web3.utils.fromWei(getAmountsIn, 'ether');\n\n    console.log(swapResult);\n  } catch (error) {\n    console.log(error);\n  }\n});\nconst connectSlice = createSlice({\n  name: 'connectSlice',\n  initialState: {\n    web3: null,\n    address: null,\n    name: 'ali',\n    msg: null,\n    contractName: null,\n    uniswapV2constract: null,\n    DAIaddress: null,\n    WETH: null,\n    DAI: null\n  },\n  reducers: {},\n  extraReducers: {\n    [web3init.fulfilled]: (state, action) => {\n      try {\n        state.web3 = action.payload.web3;\n        state.address = action.payload.address;\n        state.uniswapV2constract = action.payload.uniswapV2constract;\n        state.DAIaddress = action.payload.DAIaddress; //    state.WETH = action.payload.WETH\n      } catch (error) {\n        console.log(error.message); //       state.msg = error\n      }\n    },\n    [web3Reload.fulfilled]: (state, action) => {\n      try {\n        state.web3 = action.payload.web3;\n        state.address = action.payload.address;\n        state.uniswapV2constract = action.payload.uniswapV2constract;\n        state.DAIaddress = action.payload.DAIaddress;\n        state.DAI = action.payload.DAI; //        state.WETH = action.payload.WETH\n\n        state.contractName = action.payload.contractName;\n      } catch (error) {}\n    },\n    [web3Reload.rejected]: (state, action) => {\n      state.web3 = null;\n      state.address = null;\n      state.msg = \"user denied\";\n    },\n    [web3init.rejected]: (state, action) => {\n      console.log(\"asd\");\n      state.web3 = null;\n      state.address = null;\n      state.msg = \"user denied\";\n    }\n  }\n});\nexport const connectReducer = connectSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Documents/PIAIC/pana/Erc20/truffle/client/src/store/connectSlice.js"],"names":["createSlice","createAsyncThunk","ChainId","Token","WETH","Fetcher","Percent","Trade","Route","TokenAmount","TradeType","Web3","UniswapV2Router02","WETHcon","web3init","data","thunkAPI","givenProvider","web3","enable","address","eth","getAccounts","uniswapv2address","DAIaddress","uniswapV2constract","Contract","abi","console","log","error","web3Reload","contractName","dispatch","uniswapSdkP","WETHapprove","getState","connectReducer","WETHcontract","approve","methods","DAI","DAItoken","ROPSTEN","utils","toChecksumAddress","getDAI_ETHprice","chainId","weth","pair","fetchPairData","route","midPrice","toSignificant","invert","swapETHForTokens","amountIn","trade","EXACT_INPUT","slippageTolerance","amountOutMin","String","minimumAmountOut","raw","path","to","deadline","Math","floor","Date","now","value","inputAmount","swapResult","swapExactETHForTokens","send","from","gasPrice","swapDaiEth","DAIvalue","toWei","getAmountsOut","call","ETHvalue","fromWei","connectSlice","name","initialState","msg","reducers","extraReducers","fulfilled","state","action","payload","message","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SACIC,OADJ,EAEIC,KAFJ,EAGIC,IAHJ,EAIIC,OAJJ,EAIaC,OAJb,EAKIC,KALJ,EAMIC,KANJ,EAOIC,WAPJ,EAQIC,SARJ,QASO,cATP;AAUA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAGA,OAAO,MAAMC,QAAQ,GAAGb,gBAAgB,CACpC,UADoC,EAEpC,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACA,QAAIL,IAAI,CAACM,aAAT,EAAwB;AACpB,YAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASA,IAAI,CAACM,aAAd,CAAb;AACA,YAAMN,IAAI,CAACM,aAAL,CAAmBE,MAAnB,EAAN;AACA,YAAMC,OAAO,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAtB;AAEA,YAAMC,gBAAgB,GAAG,4CAAzB;AACA,YAAMC,UAAU,GAAG,4CAAnB;AACA,YAAMC,kBAAkB,GAAG,MAAM,IAAIP,IAAI,CAACG,GAAL,CAASK,QAAb,CAAsBd,iBAAiB,CAACe,GAAxC,EAA6CJ,gBAA7C,CAAjC,CAPoB,CAQpB;;AAEAK,MAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACA,aAAO;AACHF,QAAAA,IADG;AACGE,QAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD,CADnB;AACwBI,QAAAA,UADxB;AACoCC,QAAAA;AADpC,OAAP;AAGH;AACJ,GAhBD,CAgBE,OAAOK,KAAP,EAAc,CAEf;AACJ,CAtBmC,CAAjC;AA0BP,OAAO,MAAMC,UAAU,GAAG9B,gBAAgB,CACtC,YADsC,EAEtC,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACA,QAAIL,IAAI,CAACM,aAAT,EAAwB;AACpB,YAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASA,IAAI,CAACM,aAAd,CAAb;AAEA,YAAMG,OAAO,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAtB;AAEA,YAAMU,YAAY,GAAG,MAAMpB,iBAAiB,CAACoB,YAA7C;AAEA,YAAMT,gBAAgB,GAAG,4CAAzB;AACA,YAAMC,UAAU,GAAG,4CAAnB;AACA,YAAMC,kBAAkB,GAAG,MAAM,IAAIP,IAAI,CAACG,GAAL,CAASK,QAAb,CAAsBd,iBAAiB,CAACe,GAAxC,EAA6CJ,gBAA7C,CAAjC,CAToB,CAUpB;AAEA;;AAEA,YAAMP,QAAQ,CAACiB,QAAT,CAAkBC,WAAW,CAAC;AAAEhB,QAAAA,IAAI,EAAEA;AAAR,OAAD,CAA7B,CAAN;AAEAU,MAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACA,aAAO;AACHF,QAAAA,IADG;AACGE,QAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD,CADnB;AACwBI,QAAAA,UADxB;AACoCC,QAAAA,kBADpC;AACwDO,QAAAA;AADxD,OAAP;AAGH;AACJ,GAtBD,CAsBE,OAAOF,KAAP,EAAc,CAEf;AACJ,CA5BqC,CAAnC;AA8BP,OAAO,MAAMK,WAAW,GAAGlC,gBAAgB,CACvC,aADuC,EAEvC,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQE,MAAAA,OAAR;AAAiBK,MAAAA,kBAAjB;AAAqCrB,MAAAA;AAArC,QAA8CY,QAAQ,CAACoB,QAAT,GAAoBC,cAAxE;AAEA,UAAMC,YAAY,GAAG,MAAM,IAAIpB,IAAI,CAACG,GAAL,CAASK,QAAb,CAAsBb,OAAO,CAACc,GAA9B,EAAmCvB,IAAnC,CAA3B;AAEA,UAAMmC,OAAO,GAAG,MAAMD,YAAY,CAACE,OAAb,CAAqBD,OAArB,CAA6Bd,kBAA7B,CAAtB;AACH,GAND,CAME,OAAOK,KAAP,EAAc,CAEf;AACJ,CAZsC,CAApC;AAeP,MAAMW,GAAG,GAAGxC,gBAAgB,CACxB,KADwB,EAExB,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,QAAM;AAAEE,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBK,IAAAA;AAAjB,MAAwCT,QAAQ,CAACoB,QAAT,GAAoBC,cAAlE;AACA,QAAMK,QAAQ,GAAG,IAAIvC,KAAJ,CACbD,OAAO,CAACyC,OADK,EAEb,MAAMzB,IAAI,CAAC0B,KAAL,CAAWC,iBAAX,CAA6B,4CAA7B,CAFO,EAGb,EAHa,CAAjB;AAKA,SAAOH,QAAP;AACH,CAVuB,CAA5B;AAaA,OAAO,MAAMI,eAAe,GAAG7C,gBAAgB,CAC3C,iBAD2C,EAE3C,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYY,GAAG,GAAGrB,OAAlB;AACH,GAFD,CAEE,OAAOU,KAAP,EAAc;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AAEJ,CAT0C,CAAxC;AAYP,OAAO,MAAMI,WAAW,GAAGjC,gBAAgB,CACvC,aADuC,EAEvC,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQE,MAAAA,OAAR;AAAiBK,MAAAA;AAAjB,QAAwCT,QAAQ,CAACoB,QAAT,GAAoBC,cAAlE;AACA,QAAItB,IAAI,CAACG,IAAL,IAAa,IAAjB,EACIH,IAAI,CAACG,IAAL,GAAYA,IAAZ;AAEJ,UAAM6B,OAAO,GAAG7C,OAAO,CAACyC,OAAxB;AACA,UAAMF,GAAG,GAAG,IAAItC,KAAJ,CACRD,OAAO,CAACyC,OADA,EAER5B,IAAI,CAACG,IAAL,CAAU0B,KAAV,CAAgBC,iBAAhB,CAAkC,4CAAlC,CAFQ,EAGR,EAHQ,CAAZ;AAKAjB,IAAAA,OAAO,CAACC,GAAR,CAAYY,GAAG,CAACrB,OAAhB;AACA,UAAM4B,IAAI,GAAG5C,IAAI,CAAC2C,OAAD,CAAjB;AACA,UAAME,IAAI,GAAG,MAAM5C,OAAO,CAAC6C,aAAR,CAAsBT,GAAtB,EAA2BO,IAA3B,CAAnB;AACA,UAAMG,KAAK,GAAG,IAAI3C,KAAJ,CAAU,CAACyC,IAAD,CAAV,EAAkBD,IAAlB,CAAd;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAK,CAACC,QAAN,CAAeC,aAAf,CAA6B,CAA7B,CAAZ;AACAzB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAK,CAACC,QAAN,CAAeE,MAAf,GAAwBD,aAAxB,CAAsC,CAAtC,CAAZ;AACA,WAAO;AACHZ,MAAAA;AADG,KAAP;AAIH,GArBD,CAqBE,OAAOX,KAAP,EAAc,CAEf;AACJ,CA3BsC,CAApC;AA+BP,OAAO,MAAMyB,gBAAgB,GAAGtD,gBAAgB,CAC5C,MAD4C,EAE5C,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AAEA,UAAM;AAAEE,MAAAA,IAAF;AAAQE,MAAAA,OAAR;AAAiBK,MAAAA;AAAjB,QAAwCT,QAAQ,CAACoB,QAAT,GAAoBC,cAAlE;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY3B,OAAO,CAACyC,OAApB;AACA,UAAMF,GAAG,GAAG,IAAItC,KAAJ,CACRD,OAAO,CAACyC,OADA,EAER,MAAMzB,IAAI,CAAC0B,KAAL,CAAWC,iBAAX,CAA6B,4CAA7B,CAFE,EAGR,EAHQ,CAAZ,CAJA,CAUA;AACA;;AACA,UAAMI,IAAI,GAAG,MAAM5C,OAAO,CAAC6C,aAAR,CAAsBT,GAAtB,EAA2BrC,IAAI,CAACqC,GAAG,CAACM,OAAL,CAA/B,CAAnB;AAEA,UAAMI,KAAK,GAAG,IAAI3C,KAAJ,CAAU,CAACyC,IAAD,CAAV,EAAkB7C,IAAI,CAACqC,GAAG,CAACM,OAAL,CAAtB,CAAd;AAEA,UAAMS,QAAQ,GAAG,oBAAjB,CAhBA,CAgBuC;;AAEvC,UAAMC,KAAK,GAAG,IAAIlD,KAAJ,CACV4C,KADU,EAEV,IAAI1C,WAAJ,CAAgBL,IAAI,CAACqC,GAAG,CAACM,OAAL,CAApB,EAAmCS,QAAnC,CAFU,EAGV9C,SAAS,CAACgD,WAHA,CAAd;AAKA,UAAMC,iBAAiB,GAAG,IAAIrD,OAAJ,CAAY,IAAZ,EAAkB,OAAlB,CAA1B,CAvBA,CAuBsD;;AACtD,UAAMiB,gBAAgB,GAAG,4CAAzB;AACA,UAAMqC,YAAY,GAAGC,MAAM,CAACJ,KAAK,CAACK,gBAAN,CAAuBH,iBAAvB,EAA0CI,GAA3C,CAA3B,CAzBA,CAyB4E;;AAC5E,UAAMC,IAAI,GAAG,CAAC5D,IAAI,CAACqC,GAAG,CAACM,OAAL,CAAJ,CAAkB3B,OAAnB,EAA4BqB,GAAG,CAACrB,OAAhC,CAAb;AACA,UAAM6C,EAAE,GAAG,EAAX,CA3BA,CA2Be;;AACf,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,IAAgC,KAAK,EAAtD,CA5BA,CA4B0D;;AAC1D,UAAMC,KAAK,GAAGV,MAAM,CAACJ,KAAK,CAACe,WAAN,CAAkBT,GAAnB,CAApB,CA7BA,CA6B6C;AAC7C;;AACA,UAAMU,UAAU,GAAG,MAAMhD,kBAAkB,CAACe,OAAnB,CAA2BkC,qBAA3B,CAAiDd,YAAjD,EAA+DI,IAA/D,EAAqE5C,OAArE,EAA8E8C,QAA9E,EAAwFS,IAAxF,CAA6F;AAAEC,MAAAA,IAAI,EAAExD,OAAR;AAAiBmD,MAAAA,KAAK,EAAEA,KAAxB;AAA+BM,MAAAA,QAAQ,EAAE;AAAzC,KAA7F,CAAzB;AAEH,GAjCD,CAiCE,OAAO/C,KAAP,EAAc;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,CAvC2C,CAAzC;AA0CP,OAAO,MAAMgD,UAAU,GAAG7E,gBAAgB,CACtC,YADsC,EAEtC,OAAOc,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQE,MAAAA,OAAR;AAAiBK,MAAAA,kBAAjB;AAAqCrB,MAAAA,IAArC;AAA2CoB,MAAAA;AAA3C,QAA0DR,QAAQ,CAACoB,QAAT,GAAoBC,cAApF;AACA,UAAM0C,QAAQ,GAAG,MAAM7D,IAAI,CAAC0B,KAAL,CAAWoC,KAAX,CAAiB,KAAjB,EAAwB,OAAxB,CAAvB;AACA,UAAMC,aAAa,GAAG,MAAMxD,kBAAkB,CAACe,OAAnB,CAA2ByC,aAA3B,CAAyCF,QAAzC,EAAmD,CAACvD,UAAD,EAAapB,IAAb,CAAnD,EAAuE8E,IAAvE,EAA5B,CAHA,CAIA;;AACA,UAAMC,QAAQ,GAAG,MAAMjE,IAAI,CAAC0B,KAAL,CAAWwC,OAAX,CAAmBH,aAAa,CAAC,CAAD,CAAhC,EAAqC,OAArC,CAAvB;AACA,UAAM3C,YAAY,GAAG,MAAM,IAAIpB,IAAI,CAACG,GAAL,CAASK,QAAb,CAAsBb,OAAO,CAACc,GAA9B,EAAmCvB,IAAnC,CAA3B;AACA,UAAMmB,gBAAgB,GAAG,4CAAzB;AACA,UAAMgB,OAAO,GAAG,MAAMD,YAAY,CAACE,OAAb,CAAqBD,OAArB,CAA6BhB,gBAA7B,EAA+C0D,aAAa,CAAC,CAAD,CAA5D,EAAiEN,IAAjE,CAAsE;AAAEC,MAAAA,IAAI,EAAExD;AAAR,KAAtE,CAAtB;AACA,UAAMqD,UAAU,GAAG,MAAMhD,kBAAkB,CAACe,OAAnB,CAA2BkC,qBAA3B,CAAiDO,aAAa,CAAC,CAAD,CAA9D,EAAmE,CAAC7E,IAAD,EAAOoB,UAAP,CAAnE,EAAuFJ,OAAvF,EAAgG,EAAhG,EAAoGuD,IAApG,CAAyG;AAAEC,MAAAA,IAAI,EAAExD,OAAR;AAAiBmD,MAAAA,KAAK,EAAEU,aAAa,CAAC,CAAD;AAArC,KAAzG,CAAzB,CATA,CAUA;;AACArD,IAAAA,OAAO,CAACC,GAAR,CAAY4C,UAAZ;AAEH,GAbD,CAcA,OAAO3C,KAAP,EAAc;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,CApBqC,CAAnC;AAwBP,MAAMuD,YAAY,GAAGrF,WAAW,CAC5B;AACIsF,EAAAA,IAAI,EAAE,cADV;AAEIC,EAAAA,YAAY,EAAE;AACVrE,IAAAA,IAAI,EAAE,IADI;AAEVE,IAAAA,OAAO,EAAE,IAFC;AAGVkE,IAAAA,IAAI,EAAE,KAHI;AAIVE,IAAAA,GAAG,EAAE,IAJK;AAKVxD,IAAAA,YAAY,EAAE,IALJ;AAMVP,IAAAA,kBAAkB,EAAE,IANV;AAOVD,IAAAA,UAAU,EAAE,IAPF;AAQVpB,IAAAA,IAAI,EAAE,IARI;AASVqC,IAAAA,GAAG,EAAE;AATK,GAFlB;AAaIgD,EAAAA,QAAQ,EAAE,EAbd;AAeOC,EAAAA,aAAa,EAAE;AACd,KAAC5E,QAAQ,CAAC6E,SAAV,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAI;AACAD,QAAAA,KAAK,CAAC1E,IAAN,GAAa2E,MAAM,CAACC,OAAP,CAAe5E,IAA5B;AACA0E,QAAAA,KAAK,CAACxE,OAAN,GAAgByE,MAAM,CAACC,OAAP,CAAe1E,OAA/B;AACAwE,QAAAA,KAAK,CAACnE,kBAAN,GAA2BoE,MAAM,CAACC,OAAP,CAAerE,kBAA1C;AACAmE,QAAAA,KAAK,CAACpE,UAAN,GAAmBqE,MAAM,CAACC,OAAP,CAAetE,UAAlC,CAJA,CAKA;AACH,OAND,CAME,OAAOM,KAAP,EAAc;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACiE,OAAlB,EADY,CAEZ;AACH;AAEJ,KAba;AAcd,KAAChE,UAAU,CAAC4D,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAI;AACAD,QAAAA,KAAK,CAAC1E,IAAN,GAAa2E,MAAM,CAACC,OAAP,CAAe5E,IAA5B;AACA0E,QAAAA,KAAK,CAACxE,OAAN,GAAgByE,MAAM,CAACC,OAAP,CAAe1E,OAA/B;AACAwE,QAAAA,KAAK,CAACnE,kBAAN,GAA2BoE,MAAM,CAACC,OAAP,CAAerE,kBAA1C;AACAmE,QAAAA,KAAK,CAACpE,UAAN,GAAmBqE,MAAM,CAACC,OAAP,CAAetE,UAAlC;AACAoE,QAAAA,KAAK,CAACnD,GAAN,GAAYoD,MAAM,CAACC,OAAP,CAAerD,GAA3B,CALA,CAMA;;AACAmD,QAAAA,KAAK,CAAC5D,YAAN,GAAqB6D,MAAM,CAACC,OAAP,CAAe9D,YAApC;AACH,OARD,CAQE,OAAOF,KAAP,EAAc,CAEf;AACJ,KA1Ba;AA4Bd,KAACC,UAAU,CAACiE,QAAZ,GAAuB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAAC1E,IAAN,GAAa,IAAb;AACA0E,MAAAA,KAAK,CAACxE,OAAN,GAAgB,IAAhB;AACAwE,MAAAA,KAAK,CAACJ,GAAN,GAAY,aAAZ;AACH,KAhCa;AAkCd,KAAC1E,QAAQ,CAACkF,QAAV,GAAqB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACpCjE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA+D,MAAAA,KAAK,CAAC1E,IAAN,GAAa,IAAb;AACA0E,MAAAA,KAAK,CAACxE,OAAN,GAAgB,IAAhB;AACAwE,MAAAA,KAAK,CAACJ,GAAN,GAAY,aAAZ;AACH;AAvCa;AAftB,CAD4B,CAAhC;AA4DA,OAAO,MAAMnD,cAAc,GAAGgD,YAAY,CAACY,OAApC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport {\r\n    ChainId,\r\n    Token,\r\n    WETH,\r\n    Fetcher, Percent,\r\n    Trade,\r\n    Route,\r\n    TokenAmount,\r\n    TradeType,\r\n} from \"@uniswap/sdk\";\r\nimport Web3 from 'web3'\r\nimport UniswapV2Router02 from '../contracts/uniswapAbi.json'\r\nimport WETHcon from '../contracts/WETHabi.json'\r\n\r\n\r\nexport const web3init = createAsyncThunk(\r\n    \"web3init\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            if (Web3.givenProvider) {\r\n                const web3 = new Web3(Web3.givenProvider)\r\n                await Web3.givenProvider.enable()\r\n                const address = await web3.eth.getAccounts()\r\n\r\n                const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n                const DAIaddress = \"0xad6d458402f60fd3bd25163575031acdce07538d\"\r\n                const uniswapV2constract = await new web3.eth.Contract(UniswapV2Router02.abi, uniswapv2address)\r\n                //    const WETH = await uniswapV2constract.methods.WETH().call()\r\n\r\n                console.log(address)\r\n                return {\r\n                    web3, address: address[0], DAIaddress, uniswapV2constract\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\n\r\nexport const web3Reload = createAsyncThunk(\r\n    \"web3Reload\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            if (Web3.givenProvider) {\r\n                const web3 = new Web3(Web3.givenProvider)\r\n\r\n                const address = await web3.eth.getAccounts()\r\n\r\n                const contractName = await UniswapV2Router02.contractName;\r\n\r\n                const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n                const DAIaddress = \"0xad6d458402f60fd3bd25163575031acdce07538d\"\r\n                const uniswapV2constract = await new web3.eth.Contract(UniswapV2Router02.abi, uniswapv2address)\r\n                // const WETH = await uniswapV2constract.methods.WETH().call()\r\n\r\n                // const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH)\r\n\r\n                await thunkAPI.dispatch(uniswapSdkP({ web3: web3 }))\r\n\r\n                console.log(address)\r\n                return {\r\n                    web3, address: address[0], DAIaddress, uniswapV2constract, contractName\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\nexport const WETHapprove = createAsyncThunk(\r\n    \"WETHapprove\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            const { web3, address, uniswapV2constract, WETH } = thunkAPI.getState().connectReducer\r\n\r\n            const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH)\r\n\r\n            const approve = await WETHcontract.methods.approve(uniswapV2constract)\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\nconst DAI = createAsyncThunk(\r\n    \"DAI\",\r\n    async (data, thunkAPI) => {\r\n        const { web3, address, uniswapV2constract } = thunkAPI.getState().connectReducer\r\n        const DAItoken = new Token(\r\n            ChainId.ROPSTEN,\r\n            await web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"),\r\n            18\r\n        );\r\n        return DAItoken\r\n    }\r\n)\r\n\r\nexport const getDAI_ETHprice = createAsyncThunk(\r\n    'getDAI_ETHprice',\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            console.log(DAI().address);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n)\r\n\r\nexport const uniswapSdkP = createAsyncThunk(\r\n    'uniswapSdkP',\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            const { web3, address, uniswapV2constract } = thunkAPI.getState().connectReducer\r\n            if (data.web3 == null)\r\n                data.web3 = web3\r\n\r\n            const chainId = ChainId.ROPSTEN\r\n            const DAI = new Token(\r\n                ChainId.ROPSTEN,\r\n                data.web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"),\r\n                18\r\n            );\r\n            console.log(DAI.address)\r\n            const weth = WETH[chainId]\r\n            const pair = await Fetcher.fetchPairData(DAI, weth);\r\n            const route = new Route([pair], weth)\r\n            console.log(route.midPrice.toSignificant(6))\r\n            console.log(route.midPrice.invert().toSignificant(6))\r\n            return {\r\n                DAI\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\n\r\nexport const swapETHForTokens = createAsyncThunk(\r\n    'swap',\r\n    async (data, thunkAPI) => {\r\n        try {\r\n\r\n            const { web3, address, uniswapV2constract } = thunkAPI.getState().connectReducer\r\n            console.log(ChainId.ROPSTEN)\r\n            const DAI = new Token(\r\n                ChainId.ROPSTEN,\r\n                await web3.utils.toChecksumAddress(\"0xad6d458402f60fd3bd25163575031acdce07538d\"),\r\n                18\r\n            );\r\n\r\n            // note that you may want/need to handle this async code differently,s\r\n            // for example if top-level await is not an option\r\n            const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId]);\r\n\r\n            const route = new Route([pair], WETH[DAI.chainId]);\r\n\r\n            const amountIn = \"100000000000000000\"; // 1 WETH\r\n\r\n            const trade = new Trade(\r\n                route,\r\n                new TokenAmount(WETH[DAI.chainId], amountIn),\r\n                TradeType.EXACT_INPUT\r\n            );\r\n            const slippageTolerance = new Percent(\"50\", \"10000\"); // 50 bips, or 0.50%\r\n            const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n            const amountOutMin = String(trade.minimumAmountOut(slippageTolerance).raw); // needs to be converted to e.g. hex\r\n            const path = [WETH[DAI.chainId].address, DAI.address];\r\n            const to = \"\"; // should be a checksummed recipient address\r\n            const deadline = Math.floor(Date.now() / 1000) + 60 * 30; // 20 minutes from the current Unix time\r\n            const value = String(trade.inputAmount.raw); // // needs to be converted to e.g. hex\r\n            //     const approve = await WETHcontract.methods.approve(uniswapv2address, getAmountsOut[1]).send({ from: address })\r\n            const swapResult = await uniswapV2constract.methods.swapExactETHForTokens(amountOutMin, path, address, deadline).send({ from: address, value: value, gasPrice: 20e9 })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n)\r\n\r\nexport const swapDaiEth = createAsyncThunk(\r\n    \"swapDaiEth\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            const { web3, address, uniswapV2constract, WETH, DAIaddress } = thunkAPI.getState().connectReducer\r\n            const DAIvalue = await web3.utils.toWei('100', 'ether');\r\n            const getAmountsOut = await uniswapV2constract.methods.getAmountsOut(DAIvalue, [DAIaddress, WETH]).call()\r\n            //  const getAmountsIn = await uniswapV2constract.methods.getAmountsIn(DAIvalue, [WETH, DAIaddress]).call()\r\n            const ETHvalue = await web3.utils.fromWei(getAmountsOut[1], 'ether');\r\n            const WETHcontract = await new web3.eth.Contract(WETHcon.abi, WETH)\r\n            const uniswapv2address = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\"\r\n            const approve = await WETHcontract.methods.approve(uniswapv2address, getAmountsOut[1]).send({ from: address })\r\n            const swapResult = await uniswapV2constract.methods.swapExactETHForTokens(getAmountsOut[1], [WETH, DAIaddress], address, 15).send({ from: address, value: getAmountsOut[1] })\r\n            //   const ETHvalue = await web3.utils.fromWei(getAmountsIn, 'ether');\r\n            console.log(swapResult)\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n)\r\n\r\n\r\nconst connectSlice = createSlice(\r\n    {\r\n        name: 'connectSlice',\r\n        initialState: {\r\n            web3: null,\r\n            address: null,\r\n            name: 'ali',\r\n            msg: null,\r\n            contractName: null,\r\n            uniswapV2constract: null,\r\n            DAIaddress: null,\r\n            WETH: null,\r\n            DAI: null\r\n        },\r\n        reducers: {\r\n\r\n        }, extraReducers: {\r\n            [web3init.fulfilled]: (state, action) => {\r\n                try {\r\n                    state.web3 = action.payload.web3\r\n                    state.address = action.payload.address\r\n                    state.uniswapV2constract = action.payload.uniswapV2constract\r\n                    state.DAIaddress = action.payload.DAIaddress\r\n                    //    state.WETH = action.payload.WETH\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    //       state.msg = error\r\n                }\r\n\r\n            },\r\n            [web3Reload.fulfilled]: (state, action) => {\r\n                try {\r\n                    state.web3 = action.payload.web3\r\n                    state.address = action.payload.address\r\n                    state.uniswapV2constract = action.payload.uniswapV2constract\r\n                    state.DAIaddress = action.payload.DAIaddress\r\n                    state.DAI = action.payload.DAI\r\n                    //        state.WETH = action.payload.WETH\r\n                    state.contractName = action.payload.contractName\r\n                } catch (error) {\r\n\r\n                }\r\n            }\r\n            ,\r\n            [web3Reload.rejected]: (state, action) => {\r\n                state.web3 = null\r\n                state.address = null\r\n                state.msg = \"user denied\"\r\n            }\r\n            ,\r\n            [web3init.rejected]: (state, action) => {\r\n                console.log(\"asd\")\r\n                state.web3 = null\r\n                state.address = null\r\n                state.msg = \"user denied\"\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const connectReducer = connectSlice.reducer"]},"metadata":{},"sourceType":"module"}