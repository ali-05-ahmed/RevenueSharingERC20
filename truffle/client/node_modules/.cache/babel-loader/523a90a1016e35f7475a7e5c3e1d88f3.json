{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Documents\\\\PIAIC\\\\pana\\\\Erc20\\\\truffle\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { web3init, web3Reload, swapETHForTokens, getDAI_ETHprice, uniswapSdkP } from './store/connectSlice';\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DAI_QUERY = gql`\n  query tokens($tokenAddress: Bytes!) {\n    tokens(where: { id: $tokenAddress }) {\n      derivedETH\n      totalLiquidity\n    }\n  }\n`;\nconst ETH_PRICE_QUERY = gql`\n  query ethPrice {\n    bundle(id: \"1\") {\n      ethPrice\n    }\n  }\n`;\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\"\n  }),\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  _s();\n\n  const {\n    loading: ethLoading,\n    data: ethPriceData\n  } = useQuery(ETH_PRICE_QUERY);\n  const {\n    loading: daiLoading,\n    data: daiData\n  } = useQuery(DAI_QUERY, {\n    variables: {\n      tokenAddress: \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n    }\n  });\n  const daiPriceInEth = daiData && daiData.tokens[0].derivedETH;\n  const daiTotalLiquidity = daiData && daiData.tokens[0].totalLiquidity;\n  const ethPriceInUSD = ethPriceData && ethPriceData.bundles[0].ethPrice;\n  const address = useSelector(state => {\n    return state.connectReducer.address;\n  });\n  const accessMsg = useSelector(state => {\n    return state.connectReducer.msg;\n  });\n  const [name, setName] = useState(null);\n  const [email, setEmail] = useState(null);\n  const web3 = useSelector(state => {\n    return state.connectReducer.web3;\n  });\n  const dispatch = useDispatch();\n\n  const signmsg = async () => {\n    if (name != null && email != null) {\n      return await web3.eth.personal.sign(web3.utils.utf8ToHex(name) + web3.utils.utf8ToHex(email), address, \"test password!\");\n    }\n  };\n\n  useEffect(() => {\n    dispatch(web3Reload());\n  }, []); // const currentAccount = async () => {\n  //   await web3.personal.sign(web3.fromUtf8(\"Hello from Toptal!\"), web3.eth.coinbase, console.log);\n  // }\n\n  const connectWallet = () => {\n    console.log(\"button\");\n    dispatch(web3init());\n    console.log(address);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [\"Address\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 14\n    }, this), address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 16\n    }, this), name, /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Sign-Up Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Name \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          e.preventDefault();\n          setName(e.target.value);\n        },\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Email \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => connectWallet(),\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async () => signmsg(),\n      children: \"Sign\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 60\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch(uniswapSdkP()),\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 69\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: accessMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Dai price:\", \" \", ethLoading || daiLoading ? \"Loading token data...\" : \"$\" + // parse responses as floats and fix to 2 decimals\n      (parseFloat(daiPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Dai total liquidity:\", \" \", daiLoading ? \"Loading token data...\" : // display the total amount of DAI spread across all pools\n      parseFloat(daiTotalLiquidity).toFixed(0)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"v5X7dUm4QowJKu9rEKusJ3zIR7w=\", false, function () {\n  return [useQuery, useQuery, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Acer/Documents/PIAIC/pana/Erc20/truffle/client/src/App.js"],"names":["useDispatch","useSelector","useEffect","useState","web3init","web3Reload","swapETHForTokens","getDAI_ETHprice","uniswapSdkP","ApolloClient","InMemoryCache","HttpLink","gql","useQuery","DAI_QUERY","ETH_PRICE_QUERY","client","link","uri","cache","App","loading","ethLoading","data","ethPriceData","daiLoading","daiData","variables","tokenAddress","daiPriceInEth","tokens","derivedETH","daiTotalLiquidity","totalLiquidity","ethPriceInUSD","bundles","ethPrice","address","state","connectReducer","accessMsg","msg","name","setName","email","setEmail","web3","dispatch","signmsg","eth","personal","sign","utils","utf8ToHex","connectWallet","console","log","e","preventDefault","target","value","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\nimport { web3init, web3Reload, swapETHForTokens, getDAI_ETHprice, uniswapSdkP } from './store/connectSlice';\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n\r\n\r\n\r\nconst DAI_QUERY = gql`\r\n  query tokens($tokenAddress: Bytes!) {\r\n    tokens(where: { id: $tokenAddress }) {\r\n      derivedETH\r\n      totalLiquidity\r\n    }\r\n  }\r\n`;\r\n\r\nconst ETH_PRICE_QUERY = gql`\r\n  query ethPrice {\r\n    bundle(id: \"1\") {\r\n      ethPrice\r\n    }\r\n  }\r\n`;\r\n\r\nexport const client = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\r\n  }),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n\r\n  const { loading: ethLoading, data: ethPriceData } = useQuery(ETH_PRICE_QUERY);\r\n  const { loading: daiLoading, data: daiData } = useQuery(DAI_QUERY, {\r\n    variables: {\r\n      tokenAddress: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\r\n    },\r\n  });\r\n\r\n  const daiPriceInEth = daiData && daiData.tokens[0].derivedETH;\r\n  const daiTotalLiquidity = daiData && daiData.tokens[0].totalLiquidity;\r\n  const ethPriceInUSD = ethPriceData && ethPriceData.bundles[0].ethPrice;\r\n\r\n  const address = useSelector((state) => {\r\n    return state.connectReducer.address\r\n  })\r\n  const accessMsg = useSelector((state) => {\r\n    return state.connectReducer.msg\r\n  })\r\n\r\n  const [name, setName] = useState(null)\r\n  const [email, setEmail] = useState(null)\r\n\r\n  const web3 = useSelector((state) => {\r\n    return state.connectReducer.web3\r\n  })\r\n  const dispatch = useDispatch()\r\n  const signmsg = async () => {\r\n    if (name != null && email != null) {\r\n      return await web3.eth.personal.sign(web3.utils.utf8ToHex(name) + web3.utils.utf8ToHex(email), address, \"test password!\")\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    dispatch(web3Reload())\r\n\r\n  }, []);\r\n\r\n  // const currentAccount = async () => {\r\n  //   await web3.personal.sign(web3.fromUtf8(\"Hello from Toptal!\"), web3.eth.coinbase, console.log);\r\n\r\n  // }\r\n\r\n  const connectWallet = () => {\r\n    console.log(\"button\")\r\n\r\n    dispatch(web3init())\r\n    console.log(address)\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      Address<br></br>\r\n      {address}<br></br>\r\n      {name}\r\n      <label>Sign-Up Form</label>\r\n      <div>\r\n        Name <input type='text' onChange={(e) => {\r\n          e.preventDefault()\r\n          setName(e.target.value)\r\n        }} required ></input>\r\n      </div>\r\n      <div>\r\n        Email <input type='text' onChange={(e) => setEmail(e.target.value)} required ></input>\r\n      </div>\r\n      <button onClick={() => connectWallet()}>Connect</button>\r\n      <button onClick={async () => signmsg()}>Sign</button><br></br>\r\n      <button onClick={() => dispatch(uniswapSdkP())}>click</button><br></br>\r\n      <div>{accessMsg}</div>\r\n\r\n      <div>\r\n        Dai price:{\" \"}\r\n        {ethLoading || daiLoading\r\n          ? \"Loading token data...\"\r\n          : \"$\" +\r\n          // parse responses as floats and fix to 2 decimals\r\n          (parseFloat(daiPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(2)}\r\n      </div>\r\n      <div>\r\n        Dai total liquidity:{\" \"}\r\n        {daiLoading\r\n          ? \"Loading token data...\"\r\n          : // display the total amount of DAI spread across all pools\r\n          parseFloat(daiTotalLiquidity).toFixed(0)}\r\n      </div>\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}